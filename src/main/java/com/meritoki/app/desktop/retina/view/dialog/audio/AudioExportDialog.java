/*
 * Copyright 2021 Joaquin Osvaldo Rodriguez
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.meritoki.app.desktop.retina.view.dialog.audio;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.AudioFileFormat;
import javax.swing.JOptionPane;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.meritoki.app.desktop.retina.model.Model;
import com.meritoki.app.desktop.retina.model.document.Archive;
import com.meritoki.app.desktop.retina.model.document.Page;
import com.sun.speech.freetts.FreeTTS;
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import com.sun.speech.freetts.audio.AudioPlayer;
import com.sun.speech.freetts.audio.SingleFileAudioPlayer;

/**
 *
 * @author jorodriguez
 */
public class AudioExportDialog extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static Logger logger = LogManager.getLogger(AudioExportDialog.class.getName());
	private static final long serialVersionUID = -5500463542945050722L;
	public Model model;

	/**
	 * Creates new form AudioExportDialog
	 */
	public AudioExportDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	public void setModel(Model model) {
		this.model = model;
	}

	public void record(String fileName, List<String> stringList) {
		logger.info("record(" + fileName + ", " + stringList + ")");
		AudioPlayer audioPlayer = null;
		String name = "kevin16";
		logger.info("record(...) name=" + name);
		VoiceManager voiceManager = VoiceManager.getInstance();
		Voice voice = voiceManager.getVoice(name);
		if (voice == null) {
			logger.error("record(...) voice=null");
		} else {
			if (stringList != null && stringList.size() > 0) {
				voice.allocate();
				audioPlayer = new SingleFileAudioPlayer(fileName, AudioFileFormat.Type.WAVE);
				voice.setAudioPlayer(audioPlayer);
				for (String string : stringList) {
					voice.speak(string);
				}
				voice.deallocate();
				try {
					audioPlayer.close();
				} catch (IOException e) {
					logger.error("IOException " + e.getMessage());
				}
			} else {
				logger.error("record(...) stringList=null || stringList.size() == 0");
			}
		}
	}

	public List<Integer> parsePages(String value) throws Exception {
		List<Integer> pageList = new ArrayList<>();
		value = value.toLowerCase();
		value.trim();
		if (value.contains("all")) {
			if (value.equals("all")) {
				pageList.add(-1);
			} else {
				throw new Exception("Invalid page(s)");
			}
		} else {
			String[] commaArray = value.split(",");
			for (String c : commaArray) {
				c.trim();
				if (c.contains("-")) {
					String[] dashArray = c.split("-");
					try {
						int a = Integer.parseInt(dashArray[0].trim());
						int b = Integer.parseInt(dashArray[1].trim());
						if (a < b) {
							for (int i = a; i <= b; i++) {
								pageList.add(i);
							}
						}
					} catch (Exception e) {
						throw new Exception("Not integer page(s)");
					}
				} else {
					try {
						int a = Integer.parseInt(c);
						pageList.add(a);
					} catch (Exception e) {
						throw new Exception("Not integer page(s)");
					}
				}
			}
		}
		logger.info("parsePages(" + value + ") pageList=" + pageList);
		return pageList;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		pageTextField = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		nameTextField = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		exportButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		jLabel1.setText("Page(s):");

		jLabel2.setText("Name:");

		exportButton.setText("Export");
		exportButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exportButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addContainerGap(29, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(exportButton, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 283,
														Short.MAX_VALUE)
												.addComponent(pageTextField)))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(pageTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel2))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exportButton)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exportButtonActionPerformed
		String name = this.nameTextField.getText();
		String page = this.pageTextField.getText();
		List<Integer> pageList = null;
		try {
			pageList = this.parsePages(page);
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
		}
		
		if (pageList != null) {
			List<String> stringList = new ArrayList<String>();
			Archive archive;
			if(pageList.contains(-1)) {
				for(Page p:this.model.document.getPageList()) {
					archive = p.getArchive();
					stringList.addAll(archive.stringList);
				}
			} else {
				for (Integer i : pageList) {
					if (this.model.document.setIndex(i)) {
						Page p = this.model.document.getPage();
						if (p != null) {
							archive = p.getArchive();
							stringList.addAll(archive.stringList);
						}
					}
				}
			}
			this.record(name, stringList);
		}
	}// GEN-LAST:event_exportButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(AudioExportDialog.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(AudioExportDialog.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(AudioExportDialog.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(AudioExportDialog.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		}
		// </editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				AudioExportDialog dialog = new AudioExportDialog(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton exportButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JTextField nameTextField;
	private javax.swing.JTextField pageTextField;
	// End of variables declaration//GEN-END:variables
}
